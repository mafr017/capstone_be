version: '3'

services:
#  gateway-service:
#    platform: 'linux/amd64'
#    image: 'gateway-service:latest'
#    container_name: gateway-service
#    build:
#      context: gateway-service
#      dockerfile: Dockerfile
#    expose:
#      - "8080"
#    ports:
#      - "8080:8080"
#  auth-service:
#    platform: 'linux/amd64'
#    image: 'auth-service:latest'
#    container_name: auth-service
#    build:
#      context: auth-service
#      dockerfile: Dockerfile
#    depends_on:
#      - capstone-db
#      - room-service
#    environment:
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://capstone-db:5432/capstone_db
#      - SPRING_DATASOURCE_USERNAME=capstone_db
#      - SPRING_DATASOURCE_PASSWORD=capstone_db
#      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
#      - SERVER_PORT=8081
#    expose:
#      - "8081"
#    ports:
#      - "8081:8081"
#  reservation-service:
#    platform: 'linux/amd64'
#    image: 'reservation-service:latest'
#    container_name: reservation-service
#    build:
#      context: reservation-service
#      dockerfile: Dockerfile
#    depends_on:
#      - capstone-db
#      - room-service
#      - broker
#    environment:
#      - SERVER_PORT=8084
#      - SPRING_KAFKA_CONSUMER_GROUP-ID=rooms
#      - SPRING_KAFKA_CONSUMER_AUTO-OFFSET-RESET=earliest
#      - SPRING_KAFKA_BOOTSTRAP-SERVERS=PLAINTEXT://broker:29092
#      - spring.kafka.topic.reservation=reservation_topics
#      - spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#      - spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#    expose:
#      - "8084"
#    ports:
#      - "8084:8084"
#  room-service:
#    platform: 'linux/amd64'
#    image: 'room-service:latest'
#    container_name: room-service
#    build:
#      context: room-service
#      dockerfile: Dockerfile
#    depends_on:
#      - capstone-db
#      - cache-redis-db
#      - broker
#    environment:
#      - SERVER_PORT=8083
#      - SPRING_KAFKA_CONSUMER_GROUP-ID=tpd-rooms
#      - SPRING_KAFKA_CONSUMER_AUTO-OFFSET-RESET=earliest
#      - SPRING_KAFKA_BOOTSTRAP-SERVERS=PLAINTEXT://broker:29092
#      - spring.kafka.topic.reservation=reservation_topics
#    expose:
#      - "8083"
#    ports:
#      - "8083:8083"
  capstone-db:
    image: 'postgres:15-alpine'
    container_name: capstone-db
    environment:
      - POSTGRES_USER=capstone_db
      - POSTGRES_PASSWORD=capstone_db
      - POSTGRES_MULTIPLE_DATABASES=capstone_db
    volumes:
      - capstone_db:/var/lib/postgresql/data
    ports:
      - "5438:5432"
  cache-redis-db:
    image: redis:6.2-alpine
    container_name: cache-redis-db
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - cache_redis_db:/data
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  broker:
    image: confluentinc/cp-kafka
    container_name: broker
    ports:
      - 29092:29092
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
volumes:
  capstone_db:
  cache_redis_db: